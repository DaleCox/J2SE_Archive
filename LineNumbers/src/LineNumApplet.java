
import java.io.File;
import java.io.FileInputStream;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;

/*
 * LineNumApplet.java
 *
 * Created on May 14, 2008, 11:42 PM
 */

/**
 *
 * @author  Dale Cox
 */
public class LineNumApplet extends javax.swing.JApplet {

    /** Initializes the applet LineNumApplet */
    public void init() {
        try {
            SwingUtilities.invokeAndWait(new Runnable() {

                public void run() {
                    initComponents();
                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPaneText = new javax.swing.JScrollPane();
        jTextPaneSource = new javax.swing.JTextPane();
        jSeparator1 = new javax.swing.JSeparator();
        jToolBar1 = new javax.swing.JToolBar();
        loadFile = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        loadFileNum = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        clear = new javax.swing.JButton();

        jTextPaneSource.setEditable(false);
        jScrollPaneText.setViewportView(jTextPaneSource);

        jToolBar1.setRollover(true);
        jToolBar1.setMargin(new java.awt.Insets(1, 1, 1, 1));

        loadFile.setText("Load File w/o Line Numbers");
        loadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileActionPerformed(evt);
            }
        });
        jToolBar1.add(loadFile);
        jToolBar1.add(jSeparator3);

        loadFileNum.setText("Load File w/ Line Numbers");
        loadFileNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileNumActionPerformed(evt);
            }
        });
        jToolBar1.add(loadFileNum);
        jToolBar1.add(jSeparator2);

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        jToolBar1.add(clear);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPaneText, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 664, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPaneText, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    private void loadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileActionPerformed
        try {
            //Clear text area
            jTextPaneSource.setText("");

            //get file contents
            //String sourceContents;
            //sourceContents = readFromFile();

            //set text
            URL fileLoc = new URL("http://dalecox99.com/Programming%20Examples/Java/content.txt");
            jTextPaneSource.setPage(fileLoc);
            //DefaultStyledDocument sourceDoc = (DefaultStyledDocument) jTextPaneSource.getDocument();
            

            //Display text read from file
            //sourceDoc.insertString(0, sourceContents, null);
            //set carret position to top of doc
            jTextPaneSource.setCaretPosition(0);

        } 
        /*catch (BadLocationException ex) {
            jTextPaneSource.setText("");
            JOptionPane.showMessageDialog(jScrollPaneText, "Error: " + ex, "Applet Error", JOptionPane.ERROR_MESSAGE);
        }*/
        catch (java.io.IOException e) {
            JOptionPane.showMessageDialog(jScrollPaneText, "Error: " + e, "Applet Error", JOptionPane.ERROR_MESSAGE);
        }                
    }//GEN-LAST:event_loadFileActionPerformed

    private void loadFileNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileNumActionPerformed
        try {
            String newLine = "\\n";
            String sourceContents;
            /*/Code to read from file
            File inputFile = new File(inputFileName);
            FileInputStream in = new FileInputStream(inputFile);
            byte bt[] = new byte[(int)inputFile.length()];
            in.read(bt);
            String sourceContents = new String(bt);
            in.close();*/
            sourceContents = jTextPaneSource.getText();
            if(sourceContents.isEmpty()){
                JOptionPane.showMessageDialog(rootPane, "Please Load the File with out Line Numbers First");
                return;
            }
            jTextPaneSource.setText("");
            DefaultStyledDocument sourceDoc = (DefaultStyledDocument) jTextPaneSource.getDocument();

            //line numbers
            sourceContents = "1 " + sourceContents;
            StringBuffer sourceBuffer = new StringBuffer(sourceContents);

            //find offsets
            Pattern pCPName = Pattern.compile(newLine, Pattern.MULTILINE);
            Matcher cpMatcher = pCPName.matcher(sourceBuffer);
            ArrayList offEnd = new ArrayList();
            int count = 0;
            while (cpMatcher.find()) {
                offEnd.add(cpMatcher.end());
            }


            //Insert line num
            int endLineVal = offEnd.size() - 1;
            count = offEnd.size() + 1;

            for (int i = endLineVal; i >= 0; --i) {
                String insertString = count + " ";
                int endOff = Integer.parseInt(offEnd.get(i).toString());
                sourceBuffer.insert(endOff, insertString);
                --count;
            }

            String sourceContentsLines = new String(sourceBuffer);
            //Clear text area
            jTextPaneSource.setText("");
            //Display text read from file
            sourceDoc.insertString(0, sourceContentsLines, null);
            //jTextPaneSource.setText(sourceContents);
            jTextPaneSource.setCaretPosition(0);

        } catch (BadLocationException ex) {
            jTextPaneSource.setText("");
            JOptionPane.showMessageDialog(jScrollPaneText, "Error: " + ex, "Applet Error", JOptionPane.ERROR_MESSAGE);
        }
 
    }//GEN-LAST:event_loadFileNumActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        jTextPaneSource.setText("");
    }//GEN-LAST:event_clearActionPerformed

    private String readFromFile() {
        /**This Method Reads from a specific file **/
        String sourceContents = "";
        try {
            URL fileLoc = new URL("http://www.digitalworlddevelopment.com/Java/content.txt");
            String host=fileLoc.getHost();
            URI fileName = fileLoc.toURI();
            String Path = fileName.getPath();
            System.out.println("host: "+host);            
            System.out.println("Path: "+Path);
            /*
            PlainTextInputStream fileStream = (PlainTextInputStream) fileLoc.getContent();
            BufferedReader dis = new BufferedReader(new InputStreamReader(fileStream));
            ArrayList list = new ArrayList();
            while(dis.read()>0){
            String line = dis.readLine();
            line += " \n";
            sourceContents+= line;
            }//end while
            
            dis.close();
            fileStream.close();*/
            //fileStream.sourceContents = new String();
            //sourceContents = (String) fileContents;
        //String inputFileName = fileLoc.openStream();
        //Code to read from file
        File inputFile = new File(host+Path);
        FileInputStream in = new FileInputStream(inputFile);
        //InputStream in = fileLoc.openStream();

        byte bt[] = new byte[(int)inputFile.length()];

        in.read(bt);
        sourceContents = new String(bt);
        in.close(); 

        } catch (java.io.IOException e) {
            JOptionPane.showMessageDialog(jScrollPaneText, "Error: " + e, "Applet Error", JOptionPane.ERROR_MESSAGE);
        }
        catch (URISyntaxException ex){
            JOptionPane.showMessageDialog(jScrollPaneText, "Error: " + ex, "Applet Error", JOptionPane.ERROR_MESSAGE);
        }
        return sourceContents;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clear;
    private javax.swing.JScrollPane jScrollPaneText;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JTextPane jTextPaneSource;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton loadFile;
    private javax.swing.JButton loadFileNum;
    // End of variables declaration//GEN-END:variables
}
